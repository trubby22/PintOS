#include "userprog/syscall.h"
#include "userprog/process.h"
#include "userprog/pagedir.c"
#include "threads/vaddr.h"
#include <stdio.h>
#include <syscall-nr.h>
#include "threads/interrupt.h"
#include "threads/thread.h"
#include "lib/user/syscall.h"

static void syscall_handler (struct intr_frame *);

void
syscall_init (void) 
{
  intr_register_int (0x30, 3, INTR_ON, syscall_handler, "syscall");
}




static void
syscall_handler (struct intr_frame *f) 
{
  int *esp = (int *) f -> esp;
  int syscall_num = *esp;
  int *arg1 = (esp - 12);
  int *arg2 = (esp - 8);
  int *arg3 = (esp - 4);

  switch (syscall_num)
  {
  case SYS_HALT:
    halt();

  case SYS_EXIT:
    int status = *(int *) arg1;
    exit (status);

  case SYS_EXEC:
    const char* file = *(const char *) arg1;
    exec (file);

  case SYS_WAIT:
    int pid = *(int *) arg1;
    wait (pid);

  case SYS_CREATE:
    const char* file = *(const char *) arg1;
    create (file, initial_size);

  case SYS_REMOVE:
    const char* file = *(const char *) arg1;
    remove (file);

  case SYS_OPEN:
    const char* file = *(const char *) arg1;
    open (file);

  case SYS_FILESIZE:
    int fd = *(int *) arg1;
    filesize (fd);

  case SYS_READ:
    int fd = *(int *) arg1;
    unsigned length = *(unsigned *) arg3;
    read (fd, buffer, length);

  case SYS_WRITE:
    int fd = *(int *) arg1;
    unsigned length = *(unsigned *) arg3;
    write (fd, buffer, length);

  case SYS_SEEK:
    int fd = *(int *) arg1;
    unsigned position = *(unsigned *) arg2;
    seek (fd, position);

  case SYS_TELL:
    int fd = *(int *) arg1;
    tell (fd);

  case SYS_CLOSE:
    int fd = *(int *) arg1;
    close (fd);

  default:
    break;
  }

}

void validate_user_pointer (uint32_t *pd, void *user_pointer){
  if (user_pointer &&  pagedir_get_page(pd,user_pointer) && is_user_vaddr(user_pointer))
  {
    return;
  }
  //kill the process
  process_exit();
}

int
write (int fd, const void *buffer, unsigned size)
{
  if (fd == STDOUT_FILENO) {
    unsigned remaining = size;
    int offset = 0;

    while (remaining > CONSOLE_LIMIT) {
      putbuf(buffer + offset, CONSOLE_LIMIT);
      remaining = remaining - CONSOLE_LIMIT;
      offset = offset + CONSOLE_LIMIT;
    }
    putbuf(buffer + offset, remaining);

    return size;
  }

  return 0;
}
